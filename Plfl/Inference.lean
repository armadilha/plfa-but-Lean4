-- https://plfa.github.io/Inference/

import Plfl.Init
import Plfl.More

import Mathlib.Tactic

set_option tactic.simp.trace true

namespace Inference

-- https://plfa.github.io/Inference/#syntax
open String

def Sym : Type := String deriving BEq, DecidableEq, Repr

inductive Ty where
/-- Native natural type made of ùüò and Œπ. -/
| nat : Ty
/-- Arrow type. -/
| fn : Ty ‚Üí Ty ‚Üí Ty
/-- Product type. -/
| prod: Ty ‚Üí Ty ‚Üí Ty
deriving BEq, DecidableEq, Repr

namespace Notations
  open Ty

  scoped notation "‚Ñït" => nat
  scoped infixr:70 " =‚áí " => fn

  instance : Mul Ty where mul := .prod
end Notations

open Notations

abbrev Context : Type := List (Sym √ó Ty)

namespace Context
  abbrev extend (c : Context) (s : Sym) (t : Ty) : Context := ‚ü®s, t‚ü© :: c
end Context

namespace Notation
  open Context

 -- The goal is to make `_‚Äö_‚¶Ç_` work like an `infixl`.
  -- https://matklad.github.io/2020/04/13/simple-but-powerful-pratt-parsing.html#From-Precedence-to-Binding-Power
  -- `‚Äö` is not a comma! See: <https://www.compart.com/en/unicode/U+201A>
  notation:50 c "‚Äö " s:51 " ‚¶Ç " t:51 => extend c s t
end Notation

open Notation

/-
An attribute is said to be Synthesized,
if its parse tree node value is determined by the attribute value at its *child* nodes.

An attribute is said to be Inherited,
if its parse tree node value is determined by the attribute value at its *parent and/or siblings*.

<https://www.geeksforgeeks.org/differences-between-synthesized-and-inherited-attributes/>
-/

mutual
  /--
  A term with synthesized types.
  The main term in an eliminator is typed via synthesis.
  -/
  inductive TermS where
  | var : Sym ‚Üí TermS
  | ap : TermS ‚Üí TermI ‚Üí TermS
  | prod : TermS ‚Üí TermS ‚Üí TermS
  | syn : TermI ‚Üí Ty ‚Üí TermS
  deriving BEq, Repr
  -- * `DecidableEq` derivations are not yet supported in `mutual` blocks.
  -- See: <https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.22default.20handlers.22.20when.20deriving.20DecidableEq/near/275722237>

  /--
  A term with inherited types.
  Constructors are typed via inheritance.
  -/
  inductive TermI where
  | lam : Sym ‚Üí TermI ‚Üí TermI
  | zero : TermI
  | succ : TermI ‚Üí TermI
  | case : TermS ‚Üí TermI ‚Üí Sym ‚Üí TermI ‚Üí TermI
  | mu : Sym ‚Üí TermI ‚Üí TermI
  | fst : TermS ‚Üí TermI
  | snd : TermS ‚Üí TermI
  | inh : TermS ‚Üí TermI
  deriving BEq, Repr
end

namespace Notation
  open TermS TermI

  scoped notation:50 " ∆õ " v " : " d => lam v d
  scoped notation:50 " Œº " v " : " d => mu v d
  scoped notation:max " ùüò? " e " [zero: " o " |succ " n " : " i " ] " => case e o n i
  scoped infixr:min " $ " => ap
  -- scoped infix:60 " ‚Üì " => syn
  -- scoped postfix:60 "‚Üë " => inh
  scoped infixl:70 " ‚ñ° " => ap
  scoped prefix:80 " Œπ " => succ
  scoped prefix:90 " ` " => var
  scoped notation " ùüò " => zero
end Notation

-- https://plfa.github.io/Inference/#example-terms
abbrev two : TermI := Œπ Œπ ùüò

-- * The coercion can only happen in this direction,
-- since the other direction requires an extra type annotation.
instance : Coe TermS TermI where coe := TermI.inh

@[simp] abbrev TermI.the := TermS.syn

abbrev add : TermS :=
  (Œº "+" : ∆õ "m" : ∆õ "n" :
    ùüò? `"m"
      [zero: `"n"
      |succ "m" : Œπ (`"+" ‚ñ° `"m" ‚ñ° `"n")]
  ).the (‚Ñït =‚áí ‚Ñït =‚áí ‚Ñït)

abbrev mul : TermS :=
  (Œº "*" : ∆õ "m" : ∆õ "n" :
    ùüò? `"m"
    [zero: ùüò
    |succ "m": add ‚ñ° `"n" $ `"*" ‚ñ° `"m" ‚ñ° `"n"]
  ).the (‚Ñït =‚áí ‚Ñït =‚áí ‚Ñït)

-- Note that the typing is only required for `add` due to the rule for `ap`.
example : TermS := add ‚ñ° two ‚ñ° two

/--
The Church numeral Ty.
-/
abbrev Ch (t : Ty := ‚Ñït) : Ty := (t =‚áí t) =‚áí t =‚áí t

-- Church encoding...
abbrev succC : TermI := ∆õ "n" : Œπ `"n"
abbrev oneC : TermI := ∆õ "s" : ∆õ "z" : `"s" $ `"z"
abbrev twoC : TermI := ∆õ "s" : ∆õ "z" : `"s" $ `"s" $ `"z"
abbrev addC : TermS :=
  (∆õ "m" : ∆õ "n" : ∆õ "s" : ∆õ "z" : `"m" ‚ñ° `"s" $ `"n" ‚ñ° `"s" ‚ñ° `"z"
  ).the (Ch =‚áí Ch =‚áí Ch)
-- Note that the typing is only required for `addC` due to the rule for `ap`.
example : TermS := addC ‚ñ° twoC ‚ñ° twoC ‚ñ° ùüò

-- https://plfa.github.io/Inference/#bidirectional-type-checking
/--
A lookup judgement.
`Lookup c s ts` means that `s` is of type `ts` by _looking up_ the context `c`.
-/
inductive Context.Lookup : Context ‚Üí Sym ‚Üí Ty ‚Üí Type where
| z : Lookup (Œì‚Äö x ‚¶Ç a) x a
| s : x ‚â† y ‚Üí Lookup Œì x a ‚Üí Lookup (Œì‚Äö y ‚¶Ç b) x a
deriving DecidableEq

namespace Context.Lookup
  -- https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/d6a227a63c55bf13d49d443f47c54c7a500ea27b/md/main/tactics.md#tactics-by-macro-expansion
  /--
  `elem` validates the type of a variable by looking it up in the current context.
  This tactic fails when the lookup fails.
  -/
  scoped syntax "elem" : tactic
  macro_rules
  | `(tactic| elem) =>
    `(tactic| repeat (first | apply Lookup.s (by trivial) | exact Lookup.z))

  -- https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/d6a227a63c55bf13d49d443f47c54c7a500ea27b/md/main/macros.md#simplifying-macro-declaration
  scoped syntax "get_elem" (ppSpace term) : tactic
  macro_rules | `(tactic| get_elem $n) => match n.1.toNat with
  | 0 => `(tactic| exact Lookup.z)
  | n+1 => `(tactic| apply Lookup.s (by trivial); get_elem $(Lean.quote n))
end Context.Lookup

export Context (Lookup)
open Context (Lookup)

namespace Notation
  open Context Lookup

  scoped notation:40 c " ‚àã " s " ‚¶Ç " t:51 => Lookup c s t
  scoped macro " ‚ôØ " n:term:90 : term => `(by get_elem $n)
end Notation

mutual
  /--
  Typing of `TermS` terms.
  -/
  inductive TyS : Context ‚Üí TermS ‚Üí Ty ‚Üí Type where
  | var : Œì ‚àã x ‚¶Ç a ‚Üí TyS Œì (` x) a
  | ap: TyS Œì l (a =‚áí b) ‚Üí TyI Œì m a ‚Üí TyS Œì (l ‚ñ° m) b
  | prod: TyS Œì m a ‚Üí TyS Œì n b ‚Üí TyS Œì (.prod m n) (a * b)
  | syn : TyI Œì m a ‚Üí TyS Œì (m.the a) a

  /--
  Typing of `TermI` terms.
  -/
  inductive TyI : Context ‚Üí TermI ‚Üí Ty ‚Üí Type where
  | lam : TyI (Œì‚Äö x ‚¶Ç a) n b ‚Üí TyI Œì (∆õ x : n) (a =‚áí b)
  | zero : TyI Œì ùüò ‚Ñït
  | succ : TyI Œì m ‚Ñït ‚Üí TyI Œì (Œπ m) ‚Ñït
  | case
  : TyS Œì l ‚Ñït ‚Üí TyI Œì m a ‚Üí TyI (Œì‚Äö x ‚¶Ç ‚Ñït) n a
  ‚Üí TyI Œì (ùüò? l [zero: m |succ x : n]) a
  | mu : TyI (Œì‚Äö x ‚¶Ç a) n a ‚Üí TyI Œì (Œº x : n) a
  | fst: TyS Œì mn (a * b) ‚Üí TyI Œì (.fst mn) a
  | snd: TyS Œì mn (a * b) ‚Üí TyI Œì (.snd mn) b
  | inh : TyS Œì m a ‚Üí TyI Œì m a
end

instance : Coe (TyI Œì m a) (TyS Œì (m.the a) a) where coe := TyS.syn
instance : Coe (TyS Œì m a) (TyI Œì m a) where coe := TyI.inh

namespace Notation
  scoped notation:40 Œì " ‚ä¢ " m " ‚Ü• " a:51 => TyS Œì m a
  scoped notation:40 Œì " ‚ä¢ " m " ‚Üü " a:51 => TyS Œì (TermS.syn m a) a
  scoped notation:40 Œì " ‚ä¢ " m " ‚Üß " a:51 => TyI Œì m a
end Notation

abbrev twoTy : Œì ‚ä¢ two ‚Üü ‚Ñït := open TyS TyI in by
  apply_rules [syn, succ, zero]

abbrev addTy : Œì ‚ä¢ add ‚Ü• (‚Ñït =‚áí ‚Ñït =‚áí ‚Ñït) := open TyS TyI Context.Lookup in by
  repeat apply_rules
    [var, ap, prod, syn,
    lam, zero, succ, case, mu, fst, snd, inh]
  <;> elem

-- https://plfa.github.io/Inference/#bidirectional-mul
abbrev mulTy : Œì ‚ä¢ mul ‚Ü• (‚Ñït =‚áí ‚Ñït =‚áí ‚Ñït) := open TyS TyI Context.Lookup in by
  repeat apply_rules
    [var, ap, prod, syn,
    lam, zero, succ, case, mu, fst, snd, inh,
    addTy]
  <;> elem

-- https://plfa.github.io/Inference/#bidirectional-products
example : Œì ‚ä¢ .prod (two.the ‚Ñït) add ‚Ü• ‚Ñït * (‚Ñït =‚áí ‚Ñït =‚áí ‚Ñït)
:= open TyS TyI Context.Lookup in by
  repeat apply_rules
    [var, ap, prod, syn,
    lam, zero, succ, case, mu, fst, snd, inh,
    twoTy, addTy]
  <;> elem

example : Œì ‚ä¢ .fst (.prod (two.the ‚Ñït) add) ‚Üü ‚Ñït
:= open TyS TyI Context.Lookup in by
  repeat apply_rules
    [var, ap, prod, syn,
    lam, zero, succ, case, mu, fst, snd, inh,
    twoTy]
  <;> elem

example : Œì ‚ä¢ .snd (.prod (two.the ‚Ñït) add) ‚Üü (‚Ñït =‚áí ‚Ñït =‚áí ‚Ñït)
:= open TyS TyI Context.Lookup in by
  repeat apply_rules
    [var, ap, prod, syn,
    lam, zero, succ, case, mu, fst, snd, inh,
    addTy]
  <;> elem

-- https://plfa.github.io/Inference/#prerequisites

/-
Nothing to do. Relevant definitions have been derived.
-/

-- https://plfa.github.io/Inference/#unique-types
@[simp]
theorem Context.Lookup.unique (i : Œì ‚àã x ‚¶Ç a) (j : Œì ‚àã x ‚¶Ç b) : a = b := by
  cases i with try trivial
  | z => cases j <;> trivial
  | s => cases j with try trivial
    | s => apply unique <;> trivial

@[simp]
theorem TyS.unique (t : Œì ‚ä¢ x ‚Ü• a) (u : Œì ‚ä¢ x ‚Ü• b) : a = b := by
  match t with
  | .var i => cases u with | var j => apply Lookup.unique <;> trivial
  | .ap l _ => cases u with | ap l' _ => injection unique l l'
  | .prod m n => cases u with | prod m' n' => congr; exact unique m m'; exact unique n n'
  | .syn _ => cases u with | syn _ => trivial

-- https://plfa.github.io/Inference/#lookup-type-of-a-variable-in-the-context
lemma Context.Lookup.empty_ext_empty
: x ‚â† y
‚Üí IsEmpty (Œ£ a, Œì ‚àã x ‚¶Ç a)
‚Üí IsEmpty (Œ£ a, Œì‚Äö y ‚¶Ç b ‚àã x ‚¶Ç a)
:= by
  intro n ai; is_empty; intro ‚ü®a, i‚ü©; refine ai.false ‚ü®a, ?_‚ü©
  cases i <;> trivial

def Context.Lookup.lookup (Œì : Context) (x : Sym) : PDecidable (Œ£ a, Œì ‚àã x ‚¶Ç a) := by
  match Œì, x with
  | [], _ => right; is_empty; intro.
  | ‚ü®y, b‚ü© :: Œì, x =>
    if h : x = y then
      left; subst h; exact ‚ü®b, .z‚ü©
    else match lookup Œì x with
    | .inl ‚ü®a, i‚ü© => left; refine ‚ü®a, .s ?_ i‚ü©; trivial
    | .inr n => right; refine empty_ext_empty ?_ n; trivial

export Context.Lookup (lookup)
open Context.Lookup (lookup)

-- https://plfa.github.io/Inference/#promoting-negations
lemma TyS.empty_arg
: Œì ‚ä¢ l ‚Ü• a =‚áí b
‚Üí IsEmpty (Œì ‚ä¢ m ‚Üß a)
‚Üí IsEmpty (Œ£ b', Œì ‚ä¢ l ‚ñ° m ‚Ü• b')
:= by
  intro tl n; is_empty; intro ‚ü®b', .ap tl' tm'‚ü©
  injection TyS.unique tl tl'; rename_i h _; apply n.false; rwa [‚Üêh] at tm'

lemma TyS.empty_switch : Œì ‚ä¢ m ‚Ü• a ‚Üí a ‚â† b ‚Üí IsEmpty (Œì ‚ä¢ m ‚Ü• b) := by
  intro ta n; is_empty; intro tb; have := TyS.unique ta tb; contradiction
