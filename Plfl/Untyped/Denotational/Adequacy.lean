-- https://plfa.github.io/Adequacy/

import Plfl.Init
import Plfl.Untyped.BigStep
import Plfl.Untyped.Denotational.Soundness

namespace Adequacy

open Untyped Untyped.Notation
open Untyped.Subst
open BigStep BigStep.Notation
open Denotational Denotational.Notation

-- https://plfa.github.io/Adequacy/#the-property-of-being-greater-or-equal-to-a-function
/-- `GtFn u` means that it is "greater than" a certain function value. -/
def GtFn (u : Value) : Prop := ‚àÉ v w, v ‚áæ w ‚äë u

/-- If `u` is greater than a function, then an even greater value `u'` is too. -/
lemma GtFn.sub (gt : GtFn u) (lt : u ‚äë u') : GtFn u' :=
  let ‚ü®v, w, lt'‚ü© := gt; ‚ü®v, w, lt'.trans lt‚ü©

/-- `‚ä•` is never greater than a function. -/
lemma not_gtFn_bot : ¬¨ GtFn ‚ä•
| ‚ü®v, w, lt‚ü© => by
  have ‚ü®_, f, s, _‚ü© := sub_inv_fn lt; have ‚ü®_, _, i‚ü© := elem_of_allFn f; cases s i

/-- If the join of two values is greater than a function, then at least one of them is too. -/
lemma GtFn.conj (gt : GtFn (u ‚äî v)) : GtFn u ‚à® GtFn v := by
  have ‚ü®_, _, lt‚ü© := gt; have ‚ü®_, f, s, _‚ü© := sub_inv_fn lt; have ‚ü®v, w, i‚ü© := elem_of_allFn f
  refine Or.imp ?inl ?inr <| s i <;> (intro i'; exists v, w; exact sub_of_elem i')

/-- If neither of the two values is greater than a function, then nor is their join. -/
lemma not_gtFn_conj (ngt : ¬¨ GtFn u) (ngt' : ¬¨ GtFn v) : ¬¨ GtFn (u ‚äî v) := by
  intro gtuv; exfalso; exact gtuv.conj |>.elim ngt ngt'

/--
If the join of two values is not greater than a function,
then neither of them is individually.
-/
lemma not_gtFn_conj_inv (ngtuv : ¬¨ GtFn (u ‚äî v)) : ¬¨ GtFn u ‚àß ¬¨ GtFn v := by
  by_contra h; simp_all only [not_and, not_not]
  have ngtu := ngtuv ‚àò (GtFn.sub ¬∑ <| .conjR‚ÇÅ .refl)
  have ngtv := ngtuv ‚àò (GtFn.sub ¬∑ <| .conjR‚ÇÇ .refl)
  exact h ngtu |> ngtv

lemma not_gtFn_conj_iff : (¬¨ GtFn u ‚àß ¬¨ GtFn v) ‚Üî ¬¨ GtFn (u ‚äî v) :=
  ‚ü®(Œª nn => not_gtFn_conj nn.1 nn.2), not_gtFn_conj_inv‚ü©

theorem GtFn.dec (v : Value) : Decidable (GtFn v) := by induction v with
| bot => left; exact not_gtFn_bot
| fn v w => right; exists v, w
| conj _ _ ih ih' => cases ih with
  | isTrue h => right; have ‚ü®v, w, lt‚ü© := h; exists v, w; exact lt.conjR‚ÇÅ
  | isFalse h => cases ih' with
    | isTrue h' => right; have ‚ü®v, w, lt‚ü© := h'; exists v, w; exact lt.conjR‚ÇÇ
    | isFalse h' => left; exact not_gtFn_conj h h'

-- https://plfa.github.io/Adequacy/#relating-values-to-closures
mutual
  def ùïç : Value ‚Üí Clos ‚Üí Prop
  | _, .clos (` _) _ => ‚ä•
  | _, .clos (_ ‚ñ° _) _ => ‚ä•
  | ‚ä•, .clos (∆õ _) _ => ‚ä§
  | v ‚áæ w, .clos (∆õ n) Œ≥ =>
    have : sizeOf w < 1 + sizeOf v + sizeOf w := by simp_arith; apply Nat.zero_le
    ‚àÄ c, ùîº v c ‚Üí GtFn w ‚Üí ‚àÉ c', (Œ≥‚Äö' c ‚ä¢ n ‚áì c') ‚àß ùïç w c'
  | .conj u v, c@(.clos (∆õ _) _) =>
    have : sizeOf v < 1 + sizeOf u + sizeOf v := by simp_arith; apply Nat.zero_le
    ùïç u c ‚àß ùïç v c

  def ùîº : Value ‚Üí Clos ‚Üí Prop
  | v, .clos m Œ≥' => GtFn v ‚Üí ‚àÉ c, (Œ≥' ‚ä¢ m ‚áì c) ‚àß ùïç v c
end
-- https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Termination.20of.20mutual.20recursive.20defs.20with.20a.20.22shorthand.22.3F/near/378733953
termination_by
  ùïç v c => (sizeOf v, 0)
  ùîº v c => (sizeOf v, 1)


-- namespace Notation
-- end Notation

-- open Notation

-- open Soundness (soundness)
