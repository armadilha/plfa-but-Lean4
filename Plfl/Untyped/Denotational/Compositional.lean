-- https://plfa.github.io/Compositional/

import Plfl.Init
import Plfl.Untyped.Denotational

namespace Compositional

open Untyped.Notation
open Denotational
open Denotational.Notation

-- https://plfa.github.io/Compositional/#equation-for-lambda-abstraction
def ‚Ñ± (d : Denot (Œì‚Äö ‚ú∂)) : Denot Œì
| _, ‚ä• => ‚ä§
| Œ≥, v ‚áæ w => d (Œ≥`‚Äö v) w
| Œ≥, .conj u v => ‚Ñ± d Œ≥ u ‚àß ‚Ñ± d Œ≥ v

lemma sub_‚Ñ± (d : ‚Ñ± (‚Ñ∞ n) Œ≥ v) (lt : u ‚äë v) : ‚Ñ± (‚Ñ∞ n) Œ≥ u := by induction lt with
| bot => triv
| conjL _ _ ih ih' => exact ‚ü®ih d, ih' d‚ü©
| conjR‚ÇÅ _ ih => exact ih d.1
| conjR‚ÇÇ _ ih => exact ih d.2
| trans _ _ ih ih' => exact ih (ih' d);
| fn lt lt' => exact .sub (up_env d lt) lt'
| dist => exact .conj d.1 d.2

lemma ‚Ñ±_‚Ñ∞ (d : ‚Ñ∞ (∆õ n) Œ≥ v) : ‚Ñ± (‚Ñ∞ n) Œ≥ v := by
  generalize hx : (∆õ n) = x at *
  induction d with try injection hx
  | fn d => subst_vars; exact d
  | bot => triv
  | conj _ _ ih ih' => exact ‚ü®ih hx, ih' hx‚ü©
  | sub _ lt ih => exact sub_‚Ñ± (ih hx) lt

theorem lam_inv (d : Œ≥ ‚ä¢ ∆õ n ‚áì v ‚áæ v') : (Œ≥`‚Äö v) ‚ä¢ n ‚áì v' := ‚Ñ±_‚Ñ∞ d

lemma ‚Ñ∞_lam (d : ‚Ñ± (‚Ñ∞ n) Œ≥ v) : ‚Ñ∞ (∆õ n) Œ≥ v := match v with
| .bot => .bot
| .fn _ _ => .fn d
| .conj _ _ => (‚Ñ∞_lam d.1).conj (‚Ñ∞_lam d.2)

theorem lam_equiv : ‚Ñ∞ (∆õ n) = ‚Ñ± (‚Ñ∞ n) := by ext; exact ‚ü®‚Ñ±_‚Ñ∞, ‚Ñ∞_lam‚ü©

-- https://plfa.github.io/Compositional/#equation-for-function-application
abbrev ùíú (d d' : Denot Œì) : Denot Œì | Œ≥, w => (w ‚äë ‚ä•) ‚à® (‚àÉ v, d Œ≥ (v ‚áæ w) ‚àß d' Œ≥ v)

namespace Notation
  scoped infixl:70 " ‚óè " => ùíú
end Notation

open Notation

lemma ùíú_‚Ñ∞ (d : ‚Ñ∞ (l ‚ñ° m) Œ≥ v) : (‚Ñ∞ l ‚óè ‚Ñ∞ m) Œ≥ v := by
  generalize hx : l ‚ñ° m = x at *
  induction d with try injection hx
  | bot => left; rfl
  | ap d d' => subst_vars; right; rename_i v' _ _ _ _; exists v'
  | sub _ lt ih => match ih hx with
    | .inl lt' => left; exact lt.trans lt'
    | .inr ‚ü®v', efv', ev'‚ü© => right; refine ‚ü®v', efv'.sub ?_, ev'‚ü©; exact .fn .refl lt
  | conj _ _ ih ih' => match ih hx, ih' hx with
    | .inl lt, .inl lt' => left; exact lt.conjL lt'
    | .inl lt, .inr ‚ü®v', efv', ev'‚ü© =>
        right; refine ‚ü®v', efv'.sub ?_, ev'‚ü©; refine .fn .refl ?_
        refine .conjL ?_ .refl; exact sub_of_sub_bot lt
    | .inr ‚ü®v', efv', ev'‚ü©, .inl lt =>
        right; refine ‚ü®v', efv'.sub ?_, ev'‚ü©; refine .fn .refl ?_
        refine .conjL .refl ?_; exact sub_of_sub_bot lt
    | .inr ‚ü®v', efv', ev'‚ü©, .inr ‚ü®v'', efv'', ev''‚ü© =>
        right; refine ‚ü®v' ‚äî v'', ?_, ev'.conj ev''‚ü©
        exact (efv'.conj efv'').sub fn_conj_sub_conj_fn

lemma ‚Ñ∞_ap : (‚Ñ∞ l ‚óè ‚Ñ∞ m) Œ≥ v ‚Üí ‚Ñ∞ (l ‚ñ° m) Œ≥ v
| .inl lt => .sub .bot lt
| .inr ‚ü®_, efv, ev‚ü© => efv.ap ev

theorem ap_equiv : ‚Ñ∞ (l ‚ñ° m) = (‚Ñ∞ l ‚óè ‚Ñ∞ m) := by ext; exact ‚ü®ùíú_‚Ñ∞, ‚Ñ∞_ap‚ü©

abbrev ùí± (i : Œì ‚àã ‚ú∂) (Œ≥ : Env Œì) (v : Value) : Prop := v ‚äë Œ≥ i

theorem var_inv (d : ‚Ñ∞ (` i) Œ≥ v) : ùí± i Œ≥ v := by
  generalize hx : (` i) = x at *
  induction d with try injection hx
  | var => subst_vars; rfl
  | bot => exact .bot
  | conj _ _ ih ih' => exact (ih hx).conjL (ih' hx)
  | sub _ lt ih => exact lt.trans (ih hx)

theorem var_equiv : ‚Ñ∞ (` i) = ùí± i := by ext; exact ‚ü®var_inv, .sub .var‚ü©

-- https://plfa.github.io/Compositional/#congruence

-- Congruence Lemmas

-- Nothing to do!
-- Since we chose to use `=` instead of `‚âÉ` in `Denotational`,
-- everything is handled automagically!
