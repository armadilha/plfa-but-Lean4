-- https://plfa.github.io/More/#exercise-double-subst-stretch

-- Adapted from <https://github.com/kaa1el/plfa_solution/blob/c5869a34bc4cac56cf970e0fe38874b62bd2dafc/src/plfa/demo/DoubleSubstitutionDeBruijn.agda>.

import Plfl
import Plfl.More

import Mathlib.Tactic

set_option tactic.simp.trace true

open Term

-- https://github.com/kaa1el/plfa_solution/blob/c5869a34bc4cac56cf970e0fe38874b62bd2dafc/src/plfa/demo/DoubleSubstitutionDeBruijn.agda#L104
@[simp]
lemma subst‚ÇÅ_shift : (t' : Œì ‚ä¢ b) ‚á¥ shift (t : Œì ‚ä¢ a) = t := by
  sorry
  -- simp_all; cases t <;> try trivial
  -- ¬∑ case lam n => simp_all; apply congr_arg lam; sorry

-- https://github.com/kaa1el/plfa_solution/blob/c5869a34bc4cac56cf970e0fe38874b62bd2dafc/src/plfa/demo/DoubleSubstitutionDeBruijn.agda#L154
@[simp]
lemma shift_subst
{œÉ : ‚àÄ {a}, Œì ‚àã a ‚Üí Œî ‚ä¢ a}
(t : Œì ‚ä¢ a)
: subst (exts (b := b) œÉ) (shift t) = shift (subst œÉ t)
:= by
  sorry
  -- cases t with
  -- | var => trivial
  -- | lam t =>
  --   apply congr_arg lam
  --   have := shift_subst (b := b) (œÉ := exts œÉ) t
  --   unfold shift at this

-- https://github.com/kaa1el/plfa_solution/blob/c5869a34bc4cac56cf970e0fe38874b62bd2dafc/src/plfa/demo/DoubleSubstitutionDeBruijn.agda#L161
@[simp]
lemma exts_subst_compose
{œÉ : ‚àÄ {a}, Œì ‚àã a ‚Üí Œî ‚ä¢ a} {œÉ' : ‚àÄ {a}, Œî ‚àã a ‚Üí Œï ‚ä¢ a}
(i : Œì‚Äö b ‚àã a)
: subst (exts œÉ') (exts œÉ i) = exts (subst œÉ' ‚àò œÉ) i
:= by
  match i with
  | .z => trivial
  | .s i => exact shift_subst (œÉ i)

-- https://github.com/kaa1el/plfa_solution/blob/c5869a34bc4cac56cf970e0fe38874b62bd2dafc/src/plfa/demo/DoubleSubstitutionDeBruijn.agda#L170
@[simp]
lemma subst_subst_compose
{œÉ : ‚àÄ {a}, Œì ‚àã a ‚Üí Œî ‚ä¢ a} {œÉ' : ‚àÄ {a}, Œî ‚àã a ‚Üí Œï ‚ä¢ a}
(t : Œì ‚ä¢ a)
: subst œÉ' (subst œÉ t) = subst (subst œÉ' ‚àò œÉ) t
:= by
  match t with
  | ` t => trivial
  | ∆õ t =>
    apply congr_arg lam
    rw [subst_subst_compose (œÉ := exts œÉ) (œÉ' := exts œÉ') t]
    congr; ext; apply exts_subst_compose
  | l ‚ñ° m => apply congr_arg‚ÇÇ ap <;> apply subst_subst_compose
  | ùüò => trivial
  | Œπ t => apply congr_arg succ; apply subst_subst_compose
  | ùüò? l m n =>
    apply congr_arg‚ÇÉ case <;> try apply subst_subst_compose
    ¬∑ conv_lhs =>
      rw [subst_subst_compose (œÉ := exts œÉ) (œÉ' := exts œÉ') n]
      arg 1; ext tt t; rw [Function.comp_apply, exts_subst_compose t]
  | Œº t =>
    apply congr_arg mu
    have := subst_subst_compose (œÉ := exts œÉ) (œÉ' := exts œÉ') t
    rw [this]; congr; ext; apply exts_subst_compose
  | .prim t => trivial
  | .mulP m n => apply congr_arg‚ÇÇ mulP <;> apply subst_subst_compose
  | .let m n =>
    apply congr_arg‚ÇÇ ¬´let¬ª
    ¬∑ apply subst_subst_compose
    ¬∑ conv_lhs =>
      rw [subst_subst_compose (œÉ := exts œÉ) (œÉ' := exts œÉ') n]
      arg 1; ext tt t; rw [Function.comp_apply, exts_subst_compose t]
  | .prod m n => apply congr_arg‚ÇÇ prod <;> apply subst_subst_compose
  | .fst t => apply congr_arg fst; apply subst_subst_compose
  | .snd t => apply congr_arg snd; apply subst_subst_compose
  | .left t => apply congr_arg left; apply subst_subst_compose
  | .right t => apply congr_arg right; apply subst_subst_compose
  | .caseSum s l r =>
    apply congr_arg‚ÇÉ caseSum <;> try apply subst_subst_compose
    ¬∑ conv_lhs =>
      rw [subst_subst_compose (œÉ := exts œÉ) (œÉ' := exts œÉ') l]
      arg 1; ext tt t; rw [Function.comp_apply, exts_subst_compose t]
    ¬∑ conv_lhs =>
      rw [subst_subst_compose (œÉ := exts œÉ) (œÉ' := exts œÉ') r]
      arg 1; ext tt t; rw [Function.comp_apply, exts_subst_compose t]
  | .caseVoid v => apply congr_arg caseVoid; apply subst_subst_compose
  | ‚óØ => trivial
  | .nil => trivial
  | .cons m n => apply congr_arg‚ÇÇ cons <;> apply subst_subst_compose
  | .caseList l m n =>
    apply congr_arg‚ÇÉ caseList <;> try apply subst_subst_compose
    ¬∑ rw [subst_subst_compose (œÉ := exts (exts œÉ)) (œÉ' := exts (exts œÉ')) n]
      congr; ext _ t; rw [Function.comp_apply, exts_subst_compose t]
      congr; ext _ t; rw [Function.comp_apply, exts_subst_compose t]

theorem double_subst
: subst‚ÇÇ (v : Œì ‚ä¢ a) (w : Œì ‚ä¢ b) (n : Œì‚Äö a‚Äö b ‚ä¢ c)
= v ‚á¥ rename .s w ‚á¥ n
:= by
  cases n <;> first | trivial | simp_all; congr; ext; aesop
